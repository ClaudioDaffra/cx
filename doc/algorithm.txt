
### Non-modifying sequence operations:

v   all_of              Test condition on all elements in range
v   any_of              Test if any element in range fulfills condition 
v   none_of             Test if no elements fulfill condition
v   for_each            Apply function to range
v   find                Find value in range
v   find_if             Find element in range
v   find_if_not         Find element in range (negative condition) 
v   find_end            Find last subsequence in range
v   find_first_of       Find element from set in range
v   adjacent_find       Find equal adjacent elements in range 
v   count               Count appearances of value in range
v   count_if            Return number of elements in range satisfying condition
v   mismatch            Return first position where two ranges differ
v   equal               Test whether the elements in two ranges are equal
v   is_permutation      Test whether range is permutation of another
v   search              Search range for subsequence
v   search_n            Search range for elements

### Modifying sequence operations:

v   copy                copies entire object to new location
v   copyRange           copies a range of elements to a new location
v   copyRangeN          copies a range of elements to a new location (N) num of elemtn copies
v   copy_n              copy max(n) element
v   copy_if             copy element with condition
v   copy_backward       copy reverse
v   move                move element from object to another
v   move_backward       move element in reverse ordedrd
v   swap                std_swap ( mutility.h )
v   swap_ranges         Exchange values of two ranges 
v   iter_swap           Exchange values of objects pointed to by two iterators
v   transform           Transform range
v   replace             Replace value in range
v   replace_if          replace with condition
v   replace_copy        Copy range replacing value
v   replace_copy_if     Copy range replacing value with condition
v   fill                Fill range with value
v   fill_n              Fill sequence with value
v   generate            Generate values for range with function
v   generate_n          Generate values for sequence with function 
v   remove              Remove value from range
v   remove_if           Remove elements from range with condition
v   remove_copy         Copy range removing value 
v   remove_copy_if      Copy range removing values with condition
v   unique              Remove consecutive duplicates in range 
v   unique_copy         Copy range removing duplicates
v   reverse             Reverse range 
v   reverse_copy        Copy range reversed
v   rotate              Rotate left the elements in range 
v   rotate_copy         Copy range rotated left
v   random_shuffle      Randomly rearrange elements in range using generator (external)
v   shuffle             Randomly rearrange elements in range using generator (internal)

### Partitions:

v   is_partitioned      Test whether range is partitioned
v   partition           Partition range in two
v   partition_copy      Partition range into two
v   partition_point     Get partition point 
.   stable_partition

### Sorting:

v   sort                Sort elements in range 
v   stable_sort         Sort elements preserving order of equivalents (gcCompareFloatAsInt)
v   partial_sort        Partially sort elements in range then rotate middle
v   partial_sort_copy   Partially sort elements in range then rotate middle & copy
v   is_sorted           Check whether range is sorted
v   is_sorted_until     Find first unsorted element in range
.   nth_element

### Binary search 

v   binary_search       Test if value exists in sorted sequence 
v   lower_bound         Return iterator to lower bound 
v   upper_bound         Return iterator to upper bound 
v   equal_range         Get subrange of equal elements 

### Merge

v   merge                       Merge sorted ranges
v   includes                    Test whether sorted range includes another sorted range 
v   set_intersection            Intersection of two sorted ranges
v   set_difference              Difference of two sorted ranges
v   set_symmetric_difference    Symmetric difference of two sorted ranges
v   set_union                   Union of two sorted ranges
.   inplace_merge

### Heap:

v   push_heap           Push element into heap range
v   pop_heap            Pop element from heap range
v   make_heap           Make heap from range
v   sort_heap           Sort elements of heap
v   is_heap             Test if range is heap
v   is_heap_until       ind first element not in heap order

## Min/max:

v   min                 get min min value in object
v   max                 get min max value in object
v   minmax              get min max value in object
v   min_element         get min element in a range
v   max_element         get max element in a range
v   minmax_element      get min max value in range

### Other:

v   lexicographical_compare Lexicographical less-than comparison
v   next_permutation        Transform range to next permutation
v   prev_permutation        Transform range to prev permutation



/**/


 