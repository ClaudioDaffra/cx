*******************
Main Header
*******************

	cxx.h
	
		macro - CONCATENATE 
				MERGE
				new 
				delete
				cdWINDOWS32
				cdWINDOWS64
				cdLINUX
				cdAPPLE

		#include "gc.h"	
		#include "hashMap.h"
		#include "string.h"	
		#include "stringw.h"
		#include "string8.h"
		#include "stdio.h"
		#include "mvector.h"
		#include "iterator.h"
		#include "mstack.h"
	
*******************	
Garbage Collector
*******************

	gc.c gc.h

		typedef hashMap_t gc_t ;

		gc_t *gc ;


		GLOBAL											LOCAL
		
		--------------------------------------------------------------------------------

		#define gcStart(...) 							gc=gcLocalStart(/*__VA_ARGS__*/)
		#define gcStop(...) 							gcLocalStop(gc/*__VA_ARGS__*/)
		
		#define gcStrDup(STR) 							gcStrLocalDup(gc,STR)	
		#define gcWcsDup(STR) 							gcWcsLocalDup(gc,STR)
		#define gcIntDup(STR) 							gcIntLocalDup(gc,STR)	
		#define gcDoubleDup(STR) 						gcDoubleLocalDup(gc,STR)

		#define gcMalloc(SIZE)							gcLocalMalloc(gc,SIZE)
		#define gcCalloc(SIZEOF,SIZE)					gcMalloc(SIZEOF*SIZE);
		#define gcLocalCalloc(GC,SIZEOF,SIZE)			gcLocalMalloc(GC,SIZEOF*SIZE);

		#define gcFileOpen(FILENAME,FILEATTR)			gcLocalFileOpen(gc,FILENAME,FILEATTR)
		#define gcRealloc(PTR,SIZE)						gcLocalRealloc(gc,PTR,SIZE)
		#define gcFree(PTR)								gcLocalFree(gc,(void*)PTR)

		#define gcFileLocalClose(MAP,PTR)               gcLocalFree(MAP,(void*)PTR)
		#define gcFileClose(PTR)                        gcLocalFree(gc,(void*)PTR)	


*******************
Hash Map
*******************

	hashMap.h


	hmNew						( void) ;
	hmDelete					( hashMap_t *hm ) ;
	
	hmDeleteKey					( hashMap_t *hm ) ;
	hmDeleteKeyValue			( hashMap_t *hm ) ;
	hmFind						( hashMap_t *hm , void* key ) ;
	hmIterator					( hashMap_t* map , void* (*cb)(void*) ) ;
	hmPrintValueCB				( void * value ) ;


	#define hmInsert(HM,KEY,VALUE)
	#define hmReplace(HM,KEY,VALUE)
	#define hmErase(MAP,PTR)
	#define hmEmpty(MAP)
	#define hmCount(MAP)
	#define hmSize(MAP)
	#define hmAt(MAP,KEY)
	#define hmAssign( ADDRESS,TYPE )
	#define hmClear(MAP)

	iterator map

	#define hmItForEach(hm)
	#define hmItNext(hm)

******************* 
vector
*******************

	mvector.h

	// vectorTypeDef(TYPE,ID)

	/*
		vector_ID_d            :   TYPE
		ID_d                   :   TYPE
		vector_ID_s            :   struct vector_ID_s
		vector_ID_t            :   vector_ID_s
		vector_ID_p            :   vector_ID_t*
	*/
	
	#define vectorTypeDef(TYPE,ID)
	#define vectorType(TYPE)
	#define vectorAlloc(ID,N)
	#define vectorSize(ID)
	#define vectorCapacity(ID)
	#define vectorEmpty(ID)
	#define vectorPushBack(ID, VAL)
	#define vectorPopBack(ID)
	#define vectorClear(ID)
	#define vectorData(ID)
	#define vectorAt(ID, INDEX) (ID).data[INDEX]
	#define vectorX(ID,NDX1)             
	#define vectorXY(ID,NDX1,NDX2)       
	#define vectorXYZ(ID,NDX1,NDX2,NDX3)  
	#define vectorFront(ID
	#define vectorBack(ID)
	#define itVector(ID)
	#define vectorBegin(ID)  
	#define vectorEnd(ID)    
	#define vectorRBegin(ID) 
	#define vectorREnd(ID)    
	#define vectorShrinkToFit(ID)
	#define vectorReserve(ID, N)
	#define vectorInsertAtVal(ID, POS, VAL)
	#define vectorEraseAt(ID, POS)
	#define vectorEraseAtN(ID, POS, N)
	#define vectorResize(ID, N, VAL)
	#define vectorCopy(ID, PTR )
	#define vectorAppend(ID, V2 )
	#define vectorInsertAtVector(ID, POS, PTR )
	#define vectorInsertAtVectorFromN(ID, POS, PTR , POS2 , N)
	#define vectorPrintf(FORMAT,ID)
	#define vectorDealloc(ID)
	#define vectorSort(TYPE,ID,CMP)
	#define vectorBinarySearch(TYPE,ID,CMP,KEY)
	#define vectorAllocVector(TYPE,ID,N)

*******************	
stack
*******************

	mstack.h


	// stackTypeDef(TYPE,ID)

	/*
		stack_ID_d            :   TYPE
		ID_d                   :   TYPE
		stack_ID_s            :   struct stack_ID_s
		stack_ID_t            :   stack_ID_s
		stack_ID_p            :   stack_ID_t*
	*/

	#define stackTypeDef(TYPE,ID)
	#define stackType(TYPE)
	#define stackAlloc(ID,N)
	#define stackSize(ID)
	#define stackCapacity(ID)
	#define stackEmpty(ID)
	#define stackPush(ID, VAL)
	#define stackPop(ID)
	#define stackPrintf(FORMAT,ID)
	#define stackDealloc(ID)
	#define stackTop(ID)


*******************
stdio
*******************

	stdio.c stdio.h


	#define stdioStreamUTF8	-1
	#define stdioStreamANSI	 0
	#define stdioStreamMBS	 1

	typedef int errno_t;

	typedef struct stdio_s
	{
		#if defined(cdWINDOWS)	
			CONSOLE_FONT_INFOEX 	info 			; 
		#else
			int						info			;
		#endif			
		int						chcp 				;
		int 					stream_stdout		;
		int 					stream_stdin 		;
		int 					stream_stderr 		;
	} stdio_t ;

	void 	stdioSetUTF8	( stdio_t *stdio )	;
	void 	stdioSetMBS		( stdio_t *stdio ) 	;
    
	int 	fstdioPuts		( stdio_t* stdio, FILE* file,char* string ) ;
	int 	fstdioPutw		( stdio_t* stdio, FILE* file,wchar_t* string ) ;

	#define fstdioPrintw	(STDIO,FOUT,FORMAT,...)
	#define fstdioPrints	(STDIO,FOUT,FORMAT,...)
	#define fPrintw			(FOUT,FORMAT,...)
	#define fPrints			(FOUT,FORMAT,...)

	int         cdFileWOpen				( FILE** pf, char* fileName, const char* flag , const char* ccs ) ;
	#define     stdFileWOpen			cdFileWOpen


	FILE* 		gcLocalFileOpenW		(gc_t *map , char* fileName , const char* flag , const char* ccs ) ;
	#define     gcFileOpenW(FN,FG,CCS)	gcLocalFileOpenW(gc,FN,FG,CCS)
	
*******************	
string
*******************

	string.c    string.h
	string8.h	stringw.h

*******************	
iterator
*******************

	iterator.h
	
	#define iterator(ID)         ID##_d*
	#define itNext(IT)          (IT++)
	#define itPrev(IT)          (IT--) 
	#define itAdvance(IT,N)     (IT+=N)         
	#define itRetreat(IT,N)     (IT-=N)

	#define itDistance(P1,P2)   (    (ptrdiff_t)    (    (char*)P2 - (char*)P1)        )
    
    
    