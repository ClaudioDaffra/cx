; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32825.0 

	TITLE	C:\tmp\cxx\gc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_initialize_
_DATA	SEGMENT
COMM	_gc:DWORD
_DATA	ENDS
CRT$XCU	SEGMENT
_initialize_ DD	FLAT:_initialize
CRT$XCU	ENDS
PUBLIC	_gcMapInit
PUBLIC	_gcMapDestroy
PUBLIC	_gcMapPut
PUBLIC	_gcMapGet
PUBLIC	_gcMapDrop
PUBLIC	_gcDefaultHashFN
PUBLIC	_gcDefaultPtrCMP
PUBLIC	_gcMapAtAddress
PUBLIC	_gcLocalDestroy
PUBLIC	_gcFreeDtor
PUBLIC	_gcFCloseDtor
PUBLIC	_gcLocalStart
PUBLIC	_gcLocalMalloc
PUBLIC	_gcLocalPush
PUBLIC	_gcLocalFileOpen
PUBLIC	_gcLocalFree
PUBLIC	_gcLocalPop
PUBLIC	_gcLocalStop
PUBLIC	_gcLocalRealloc
PUBLIC	_gcLocalStrDup
PUBLIC	_gcLocalWcsDup
PUBLIC	_gcCompareStrC
PUBLIC	_gcCompareWStrC
PUBLIC	_gcComparepStrC
PUBLIC	_gcComparepWStrC
PUBLIC	_gcCompareInt
PUBLIC	_gcCompareFloat
PUBLIC	_gcCompareDouble
PUBLIC	_gcCompareFloatAsInt
PUBLIC	_gcCompareDoubleAsInt
PUBLIC	_gcMapNew
PUBLIC	_gcMapDelete
PUBLIC	_gcMapFind
PUBLIC	_gcIntLocalDup
PUBLIC	_gcLocalDoubleDup
PUBLIC	??_C@_1BC@FDGLNGGH@?$AAs?$AAr?$AAc?$AA?2?$AAg?$AAc?$AA?4?$AAc@ ; `string'
PUBLIC	??_C@_1BC@GAIIICJE@?$AAg?$AAc?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL@ ; `string'
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_wcsdup:PROC
EXTRN	_strdup:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_realloc:PROC
EXTRN	_atexit:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__wassert:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT ??_C@_1BC@GAIIICJE@?$AAg?$AAc?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL@
CONST	SEGMENT
??_C@_1BC@GAIIICJE@?$AAg?$AAc?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL@ DB 'g', 00H
	DB	'c', 00H, '!', 00H, '=', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@FDGLNGGH@?$AAs?$AAr?$AAc?$AA?2?$AAg?$AAc?$AA?4?$AAc@
CONST	SEGMENT
??_C@_1BC@FDGLNGGH@?$AAs?$AAr?$AAc?$AA?2?$AAg?$AAc?$AA?4?$AAc@ DB 's', 00H
	DB	'r', 00H, 'c', 00H, '\', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalDoubleDup
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_val$ = 12						; size = 8
_gcLocalDoubleDup PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 697
	push	esi
; Line 490
	push	8
	call	_malloc
; Line 492
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+16]
	call	_gcMapPut
; Line 700
	movsd	xmm0, QWORD PTR _val$[esp+20]
; Line 492
	add	esp, 20					; 00000014H
; Line 700
	movsd	QWORD PTR [esi], xmm0
; Line 702
	mov	eax, esi
	pop	esi
; Line 703
	ret	0
_gcLocalDoubleDup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcIntLocalDup
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_val$ = 12						; size = 4
_gcIntLocalDup PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 686
	push	esi
; Line 490
	push	4
	call	_malloc
; Line 492
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+16]
	call	_gcMapPut
; Line 689
	mov	ecx, DWORD PTR _val$[esp+20]
; Line 492
	add	esp, 20					; 00000014H
; Line 689
	mov	DWORD PTR [esi], ecx
; Line 691
	mov	eax, esi
	pop	esi
; Line 692
	ret	0
_gcIntLocalDup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapFind
_TEXT	SEGMENT
_gcMap$ = 8						; size = 4
_ptr$ = 12						; size = 4
_gcMapFind PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 660
	push	1
	push	DWORD PTR _ptr$[esp]
	push	DWORD PTR _gcMap$[esp+4]
	call	_gcMapGet
	add	esp, 12					; 0000000cH
; Line 661
	ret	0
_gcMapFind ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapDelete
_TEXT	SEGMENT
_gcMap$ = 8						; size = 4
_gcMapDelete PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 652
	push	ebx
; Line 297
	mov	ebx, DWORD PTR _gcMap$[esp]
; Line 652
	push	edi
; Line 297
	xor	edi, edi
	cmp	DWORD PTR [ebx+12], edi
	jbe	SHORT $LN6@gcMapDelet
	push	esi
	npad	2
$LL7@gcMapDelet:
; Line 299
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+edi*4]
; Line 300
	test	eax, eax
	je	SHORT $LN5@gcMapDelet
	npad	7
$LL8@gcMapDelet:
; Line 302
	mov	esi, DWORD PTR [eax+8]
; Line 307
	push	eax
	call	_free
	add	esp, 4
; Line 309
	mov	eax, esi
	test	esi, esi
	jne	SHORT $LL8@gcMapDelet
$LN5@gcMapDelet:
; Line 297
	inc	edi
	cmp	edi, DWORD PTR [ebx+12]
	jb	SHORT $LL7@gcMapDelet
	pop	esi
$LN6@gcMapDelet:
; Line 314
	push	DWORD PTR [ebx]
	call	_free
; Line 655
	push	ebx
	call	_free
	add	esp, 8
	pop	edi
	pop	ebx
; Line 656
	ret	0
_gcMapDelete ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapNew
_TEXT	SEGMENT
_gcMapNew PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 639
	push	esi
; Line 640
	push	24					; 00000018H
	call	_malloc
	mov	esi, eax
	add	esp, 4
; Line 642
	test	esi, esi
	jne	SHORT $LN3@gcMapNew
	push	642					; 00000282H
	push	OFFSET ??_C@_1BC@FDGLNGGH@?$AAs?$AAr?$AAc?$AA?2?$AAg?$AAc?$AA?4?$AAc@
	push	OFFSET ??_C@_1BC@GAIIICJE@?$AAg?$AAc?$AA?$CB?$AA?$DN?$AAN?$AAU?$AAL?$AAL@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@gcMapNew:
; Line 53
	push	4
	push	10					; 0000000aH
	call	_calloc
	add	esp, 8
	mov	DWORD PTR [esi], eax
; Line 55
	test	eax, eax
	mov	eax, esi
	je	SHORT $LN4@gcMapNew
; Line 57
	mov	DWORD PTR [esi+4], OFFSET _gcDefaultHashFN
; Line 58
	mov	DWORD PTR [esi+8], OFFSET _gcDefaultPtrCMP
; Line 59
	mov	DWORD PTR [esi+12], 10			; 0000000aH
; Line 60
	mov	DWORD PTR [esi+16], 1061158912		; 3f400000H
; Line 61
	mov	DWORD PTR [esi+20], 0
$LN4@gcMapNew:
	pop	esi
; Line 647
	ret	0
_gcMapNew ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareDoubleAsInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareDoubleAsInt PROC				; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 451
	mov	eax, DWORD PTR _a$[esp-4]
	push	esi
	cvttsd2si esi, QWORD PTR [eax]
; Line 452
	mov	eax, DWORD PTR _b$[esp]
	cvttsd2si edx, QWORD PTR [eax]
; Line 453
	xor	eax, eax
	cmp	esi, edx
	setg	al
	xor	ecx, ecx
	cmp	esi, edx
	pop	esi
	setl	cl
	sub	eax, ecx
; Line 454
	ret	0
_gcCompareDoubleAsInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareFloatAsInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareFloatAsInt PROC				; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 443
	mov	eax, DWORD PTR _a$[esp-4]
	push	esi
	cvttss2si esi, DWORD PTR [eax]
; Line 444
	mov	eax, DWORD PTR _b$[esp]
	cvttss2si edx, DWORD PTR [eax]
; Line 445
	xor	eax, eax
	cmp	esi, edx
	setg	al
	xor	ecx, ecx
	cmp	esi, edx
	pop	esi
	setl	cl
	sub	eax, ecx
; Line 446
	ret	0
_gcCompareFloatAsInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareDouble
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareDouble PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 434
	mov	eax, DWORD PTR _a$[esp-4]
	movsd	xmm1, QWORD PTR [eax]
; Line 435
	mov	eax, DWORD PTR _b$[esp-4]
	movsd	xmm0, QWORD PTR [eax]
; Line 436
	xor	eax, eax
	comisd	xmm1, xmm0
	seta	al
	xor	ecx, ecx
	comisd	xmm0, xmm1
	seta	cl
	sub	eax, ecx
; Line 437
	ret	0
_gcCompareDouble ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareFloat
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareFloat PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 427
	mov	eax, DWORD PTR _a$[esp-4]
	movss	xmm1, DWORD PTR [eax]
; Line 428
	mov	eax, DWORD PTR _b$[esp-4]
	movss	xmm0, DWORD PTR [eax]
; Line 429
	xor	eax, eax
	comiss	xmm1, xmm0
	seta	al
	xor	ecx, ecx
	comiss	xmm0, xmm1
	seta	cl
	sub	eax, ecx
; Line 430
	ret	0
_gcCompareFloat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareInt
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareInt PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 415
	mov	eax, DWORD PTR _a$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax]
; Line 416
	mov	eax, DWORD PTR _b$[esp]
	mov	edx, DWORD PTR [eax]
; Line 417
	xor	eax, eax
	cmp	esi, edx
	setg	al
	xor	ecx, ecx
	cmp	esi, edx
	pop	esi
	setl	cl
	sub	eax, ecx
; Line 418
	ret	0
_gcCompareInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcComparepWStrC
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcComparepWStrC PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 403
	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR _a$[esp-4]
$LL3@gcComparep:
	mov	dx, WORD PTR [eax]
	cmp	dx, WORD PTR [ecx]
	jne	SHORT $LN4@gcComparep
	test	dx, dx
	je	SHORT $LN5@gcComparep
	mov	dx, WORD PTR [eax+2]
	cmp	dx, WORD PTR [ecx+2]
	jne	SHORT $LN4@gcComparep
	add	eax, 4
	add	ecx, 4
	test	dx, dx
	jne	SHORT $LL3@gcComparep
$LN5@gcComparep:
	xor	eax, eax
; Line 404
	ret	0
$LN4@gcComparep:
; Line 403
	sbb	eax, eax
	or	eax, 1
; Line 404
	ret	0
_gcComparepWStrC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcComparepStrC
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcComparepStrC PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 396
	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR _a$[esp-4]
$LL3@gcComparep:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN4@gcComparep
	test	dl, dl
	je	SHORT $LN5@gcComparep
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN4@gcComparep
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL3@gcComparep
$LN5@gcComparep:
	xor	eax, eax
; Line 398
	ret	0
$LN4@gcComparep:
; Line 396
	sbb	eax, eax
	or	eax, 1
; Line 398
	ret	0
_gcComparepStrC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareWStrC
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareWStrC PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 390
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [eax]
	npad	4
$LL3@gcCompareW:
	mov	dx, WORD PTR [eax]
	cmp	dx, WORD PTR [ecx]
	jne	SHORT $LN4@gcCompareW
	test	dx, dx
	je	SHORT $LN5@gcCompareW
	mov	dx, WORD PTR [eax+2]
	cmp	dx, WORD PTR [ecx+2]
	jne	SHORT $LN4@gcCompareW
	add	eax, 4
	add	ecx, 4
	test	dx, dx
	jne	SHORT $LL3@gcCompareW
$LN5@gcCompareW:
	xor	eax, eax
; Line 391
	ret	0
$LN4@gcCompareW:
; Line 390
	sbb	eax, eax
	or	eax, 1
; Line 391
	ret	0
_gcCompareWStrC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcCompareStrC
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_gcCompareStrC PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 383
	mov	eax, DWORD PTR _b$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _a$[esp-4]
	mov	eax, DWORD PTR [eax]
	npad	4
$LL3@gcCompareS:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN4@gcCompareS
	test	dl, dl
	je	SHORT $LN5@gcCompareS
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN4@gcCompareS
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL3@gcCompareS
$LN5@gcCompareS:
	xor	eax, eax
; Line 385
	ret	0
$LN4@gcCompareS:
; Line 383
	sbb	eax, eax
	or	eax, 1
; Line 385
	ret	0
_gcCompareStrC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _initialize
_TEXT	SEGMENT
_initialize PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 29
	push	esi
; Line 475
	push	24					; 00000018H
	call	_malloc
; Line 53
	push	4
	push	10					; 0000000aH
; Line 475
	mov	esi, eax
; Line 53
	call	_calloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
; Line 55
	test	eax, eax
	je	SHORT $LN5@initialize
; Line 57
	mov	DWORD PTR [esi+4], OFFSET _gcDefaultHashFN
; Line 58
	mov	DWORD PTR [esi+8], OFFSET _gcDefaultPtrCMP
; Line 59
	mov	DWORD PTR [esi+12], 10			; 0000000aH
; Line 60
	mov	DWORD PTR [esi+16], 1061158912		; 3f400000H
; Line 61
	mov	DWORD PTR [esi+20], 0
$LN5@initialize:
; Line 31
	push	OFFSET _finalize
	mov	DWORD PTR _gc, esi
	call	_atexit
	add	esp, 4
	pop	esi
; Line 32
	ret	0
_initialize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalWcsDup
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_str$ = 12						; size = 4
_gcLocalWcsDup PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 675
	push	esi
; Line 676
	push	DWORD PTR _str$[esp]
	call	_wcsdup
; Line 678
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+16]
	call	_gcMapPut
	add	esp, 20					; 00000014H
; Line 680
	mov	eax, esi
	pop	esi
; Line 681
	ret	0
_gcLocalWcsDup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalStrDup
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_str$ = 12						; size = 4
_gcLocalStrDup PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 666
	push	esi
; Line 667
	push	DWORD PTR _str$[esp]
	call	_strdup
; Line 669
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+16]
	call	_gcMapPut
	add	esp, 20					; 00000014H
; Line 671
	mov	eax, esi
	pop	esi
; Line 672
	ret	0
_gcLocalStrDup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalRealloc
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_SIZE$ = 16						; size = 4
_gcLocalRealloc PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 610
	mov	eax, DWORD PTR _SIZE$[esp-4]
	push	esi
	mov	esi, DWORD PTR _ptr$[esp]
	push	edi
	test	eax, eax
	jne	SHORT $LN6@gcLocalRea
; Line 529
	test	esi, esi
	je	SHORT $LN10@gcLocalRea
; Line 536
	mov	edi, DWORD PTR _gc$[esp+4]
	push	1
	push	esi
	push	edi
	call	_gcMapGet
	add	esp, 12					; 0000000cH
; Line 539
	test	eax, eax
	je	SHORT $LN10@gcLocalRea
; Line 543
	mov	eax, DWORD PTR [eax]
	push	esi
	call	eax
; Line 555
	push	1
	push	esi
	push	edi
	call	_gcMapDrop
	add	esp, 16					; 00000010H
$LN10@gcLocalRea:
	pop	edi
; Line 613
	xor	eax, eax
; Line 634
	pop	esi
	ret	0
$LN6@gcLocalRea:
; Line 618
	test	esi, esi
	jne	SHORT $LN3@gcLocalRea
; Line 490
	push	eax
	call	_malloc
; Line 492
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+20]
	call	_gcMapPut
	add	esp, 20					; 00000014H
; Line 618
	mov	eax, esi
	pop	edi
; Line 634
	pop	esi
	ret	0
$LN3@gcLocalRea:
	push	ebx
; Line 622
	push	eax
	push	esi
	call	_realloc
	mov	ebx, eax
	add	esp, 8
; Line 624
	test	ebx, ebx
	je	SHORT $LN7@gcLocalRea
; Line 571
	mov	edi, DWORD PTR _gc$[esp+8]
	push	1
	push	esi
	push	edi
	call	_gcMapGet
	add	esp, 12					; 0000000cH
	test	eax, eax
; Line 574
	je	SHORT $LN19@gcLocalRea
; Line 589
	push	1
	push	esi
	push	edi
	call	_gcMapDrop
	add	esp, 12					; 0000000cH
$LN19@gcLocalRea:
; Line 505
	push	1
	push	OFFSET _gcFreeDtor
	push	ebx
	push	edi
	call	_gcMapPut
	add	esp, 16					; 00000010H
$LN7@gcLocalRea:
; Line 633
	mov	eax, ebx
	pop	ebx
	pop	edi
; Line 634
	pop	esi
	ret	0
_gcLocalRealloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalStop
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_gcLocalStop PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 597
	push	ebx
	push	ebp
; Line 327
	mov	ebp, DWORD PTR _gc$[esp+4]
	xor	ebx, ebx
	cmp	DWORD PTR [ebp+12], ebx
	jbe	SHORT $LN6@gcLocalSto
	push	esi
	push	edi
	npad	1
$LL7@gcLocalSto:
; Line 329
	mov	esi, DWORD PTR [ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
; Line 330
	test	esi, esi
	je	SHORT $LN5@gcLocalSto
	npad	6
$LL8@gcLocalSto:
; Line 341
	push	DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [esi+8]
	call	eax
; Line 343
	push	esi
	call	_free
	add	esp, 8
; Line 344
	mov	esi, edi
	test	edi, edi
	jne	SHORT $LL8@gcLocalSto
$LN5@gcLocalSto:
; Line 327
	inc	ebx
	cmp	ebx, DWORD PTR [ebp+12]
	jb	SHORT $LL7@gcLocalSto
	pop	edi
	pop	esi
$LN6@gcLocalSto:
; Line 349
	push	DWORD PTR [ebp]
	call	_free
; Line 600
	push	ebp
	call	_free
	add	esp, 8
; Line 602
	xor	eax, eax
	pop	ebp
	pop	ebx
; Line 603
	ret	0
_gcLocalStop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalPop
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_gcLocalPop PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 563
	push	esi
; Line 564
	mov	esi, DWORD PTR _ptr$[esp]
	test	esi, esi
	je	SHORT $LN3@gcLocalPop
; Line 571
	push	1
	push	esi
	push	DWORD PTR _gc$[esp+8]
	call	_gcMapGet
	add	esp, 12					; 0000000cH
	test	eax, eax
; Line 574
	je	SHORT $LN3@gcLocalPop
; Line 589
	push	1
	push	esi
	push	DWORD PTR _gc$[esp+8]
	call	_gcMapDrop
	add	esp, 12					; 0000000cH
; Line 591
	mov	eax, esi
	pop	esi
; Line 592
	ret	0
$LN3@gcLocalPop:
; Line 586
	xor	eax, eax
	pop	esi
; Line 592
	ret	0
_gcLocalPop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalFree
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_gcLocalFree PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 528
	push	esi
; Line 529
	mov	esi, DWORD PTR _ptr$[esp]
	test	esi, esi
	je	SHORT $LN3@gcLocalFre
; Line 536
	push	1
	push	esi
	push	DWORD PTR _gc$[esp+8]
	call	_gcMapGet
	add	esp, 12					; 0000000cH
; Line 539
	test	eax, eax
	je	SHORT $LN3@gcLocalFre
; Line 543
	mov	ecx, DWORD PTR [eax]
	push	esi
	call	ecx
; Line 555
	push	1
	push	esi
	push	DWORD PTR _gc$[esp+12]
	call	_gcMapDrop
	add	esp, 16					; 00000010H
; Line 557
	mov	eax, esi
	pop	esi
; Line 558
	ret	0
$LN3@gcLocalFre:
; Line 551
	xor	eax, eax
	pop	esi
; Line 558
	ret	0
_gcLocalFree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalFileOpen
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_fileName$ = 12						; size = 4
_flag$ = 16						; size = 4
_gcLocalFileOpen PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 515
	push	esi
; Line 516
	push	DWORD PTR _flag$[esp]
	push	DWORD PTR _fileName$[esp+4]
	call	_fopen
; Line 518
	push	1
	mov	esi, eax
	push	OFFSET _gcFCloseDtor
	push	esi
	push	DWORD PTR _gc$[esp+20]
	call	_gcMapPut
	add	esp, 24					; 00000018H
; Line 522
	mov	eax, esi
	pop	esi
; Line 523
	ret	0
_gcLocalFileOpen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalPush
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_SIZE$ = 16						; size = 4
_gcLocalPush PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 505
	push	1
	push	OFFSET _gcFreeDtor
	push	DWORD PTR _ptr$[esp+4]
	push	DWORD PTR _gc$[esp+8]
	call	_gcMapPut
; Line 509
	mov	eax, DWORD PTR _ptr$[esp+12]
	add	esp, 16					; 00000010H
; Line 510
	ret	0
_gcLocalPush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalMalloc
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_SIZE$ = 12						; size = 4
_gcLocalMalloc PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 486
	mov	eax, DWORD PTR _SIZE$[esp-4]
	test	eax, eax
	jne	SHORT $LN4@gcLocalMal
; Line 497
	ret	0
$LN4@gcLocalMal:
	push	esi
; Line 490
	push	eax
	call	_malloc
; Line 492
	push	1
	mov	esi, eax
	push	OFFSET _gcFreeDtor
	push	esi
	push	DWORD PTR _gc$[esp+16]
	call	_gcMapPut
	add	esp, 20					; 00000014H
; Line 496
	mov	eax, esi
	pop	esi
; Line 497
	ret	0
_gcLocalMalloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalStart
_TEXT	SEGMENT
_gcLocalStart PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 474
	push	esi
; Line 475
	push	24					; 00000018H
	call	_malloc
; Line 53
	push	4
	push	10					; 0000000aH
; Line 475
	mov	esi, eax
; Line 53
	call	_calloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
; Line 55
	test	eax, eax
	mov	eax, esi
	je	SHORT $LN3@gcLocalSta
; Line 57
	mov	DWORD PTR [esi+4], OFFSET _gcDefaultHashFN
; Line 58
	mov	DWORD PTR [esi+8], OFFSET _gcDefaultPtrCMP
; Line 59
	mov	DWORD PTR [esi+12], 10			; 0000000aH
; Line 60
	mov	DWORD PTR [esi+16], 1061158912		; 3f400000H
; Line 61
	mov	DWORD PTR [esi+20], 0
$LN3@gcLocalSta:
	pop	esi
; Line 480
	ret	0
_gcLocalStart ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcFCloseDtor
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_gcFCloseDtor PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 468
	mov	eax, DWORD PTR _ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN2@gcFCloseDt
	mov	DWORD PTR _ptr$[esp-4], eax
	jmp	_fclose
$LN2@gcFCloseDt:
; Line 469
	ret	0
_gcFCloseDtor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcFreeDtor
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_gcFreeDtor PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 459
	mov	eax, DWORD PTR _ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN2@gcFreeDtor
	mov	DWORD PTR _ptr$[esp-4], eax
	jmp	_free
$LN2@gcFreeDtor:
; Line 460
	ret	0
_gcFreeDtor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcLocalDestroy
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_flags$ = 12						; size = 2
_gcLocalDestroy PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 327
	mov	eax, DWORD PTR _gc$[esp-4]
	push	ebp
	xor	ebp, ebp
	cmp	DWORD PTR [eax+12], ebp
	jbe	SHORT $LN3@gcLocalDes
	push	ebx
	push	esi
	push	edi
	npad	1
$LL4@gcLocalDes:
; Line 329
	mov	esi, DWORD PTR [eax]
	mov	esi, DWORD PTR [esi+ebp*4]
; Line 330
	test	esi, esi
	je	SHORT $LN2@gcLocalDes
	mov	ebx, DWORD PTR _flags$[esp+12]
	and	ebx, 2
$LL5@gcLocalDes:
; Line 332
	mov	edi, DWORD PTR [esi+8]
; Line 333
	test	bx, bx
	je	SHORT $LN7@gcLocalDes
; Line 341
	push	DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	call	eax
	add	esp, 4
$LN7@gcLocalDes:
; Line 343
	push	esi
	call	_free
	add	esp, 4
; Line 344
	mov	esi, edi
	test	edi, edi
	jne	SHORT $LL5@gcLocalDes
	mov	eax, DWORD PTR _gc$[esp+12]
$LN2@gcLocalDes:
; Line 327
	inc	ebp
	cmp	ebp, DWORD PTR [eax+12]
	jb	SHORT $LL4@gcLocalDes
	pop	edi
	pop	esi
	pop	ebx
$LN3@gcLocalDes:
; Line 349
	push	DWORD PTR [eax]
	call	_free
	add	esp, 4
	pop	ebp
; Line 350
	ret	0
_gcLocalDestroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _finalize
_TEXT	SEGMENT
_finalize PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 35
	push	ebx
	push	ebp
; Line 36
	mov	ebp, DWORD PTR _gc
; Line 327
	xor	ebx, ebx
	cmp	DWORD PTR [ebp+12], ebx
	jbe	SHORT $LN8@finalize
	push	esi
	push	edi
$LL9@finalize:
; Line 329
	mov	esi, DWORD PTR [ebp]
	mov	esi, DWORD PTR [esi+ebx*4]
; Line 330
	test	esi, esi
	je	SHORT $LN7@finalize
	npad	5
$LL10@finalize:
; Line 341
	push	DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [esi+8]
	call	eax
; Line 343
	push	esi
	call	_free
	add	esp, 8
; Line 344
	mov	esi, edi
	test	edi, edi
	jne	SHORT $LL10@finalize
$LN7@finalize:
; Line 327
	inc	ebx
	cmp	ebx, DWORD PTR [ebp+12]
	jb	SHORT $LL9@finalize
	pop	edi
	pop	esi
$LN8@finalize:
; Line 349
	push	DWORD PTR [ebp]
	call	_free
; Line 600
	push	ebp
	call	_free
	add	esp, 8
	pop	ebp
	pop	ebx
; Line 37
	ret	0
_finalize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapAtAddress
_TEXT	SEGMENT
_k_hash$1$ = 8						; size = 4
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_flags$ = 16						; size = 2
_gcMapAtAddress PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 185
	push	ebx
; Line 189
	mov	ebx, DWORD PTR _gc$[esp]
	push	ebp
	mov	ebp, DWORD PTR _ptr$[esp+4]
	push	esi
	mov	eax, DWORD PTR [ebx+4]
	push	edi
	push	ebp
	call	eax
; Line 190
	xor	edx, edx
	mov	DWORD PTR _k_hash$1$[esp+16], eax
	div	DWORD PTR [ebx+12]
	mov	esi, DWORD PTR [ebx]
	add	esp, 4
	mov	esi, DWORD PTR [esi+edx*4]
; Line 191
	test	esi, esi
	je	SHORT $LN3@gcMapAtAdd
	mov	edi, DWORD PTR _flags$[esp+12]
	and	edi, 1
	npad	2
$LL2@gcMapAtAdd:
; Line 193
	mov	eax, DWORD PTR [esi]
	push	eax
	test	di, di
	je	SHORT $LN6@gcMapAtAdd
	mov	eax, DWORD PTR [ebx+4]
	call	eax
	xor	ecx, ecx
	add	esp, 4
	cmp	DWORD PTR _k_hash$1$[esp+12], eax
	sete	cl
	jmp	SHORT $LN7@gcMapAtAdd
$LN6@gcMapAtAdd:
	mov	eax, DWORD PTR [ebx+8]
	push	ebp
	call	eax
	add	esp, 8
	movzx	ecx, al
$LN7@gcMapAtAdd:
	test	ecx, ecx
	jne	SHORT $LN9@gcMapAtAdd
; Line 197
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL2@gcMapAtAdd
$LN3@gcMapAtAdd:
	pop	edi
; Line 201
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	ret	0
$LN9@gcMapAtAdd:
	pop	edi
; Line 195
	lea	eax, DWORD PTR [esi+4]
; Line 201
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_gcMapAtAddress ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcDefaultPtrCMP
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_gcDefaultPtrCMP PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 364
	mov	eax, DWORD PTR _p1$[esp-4]
	cmp	eax, DWORD PTR _p2$[esp-4]
	sete	al
; Line 365
	ret	0
_gcDefaultPtrCMP ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcDefaultHashFN
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_gcDefaultHashFN PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 357
	imul	ecx, DWORD PTR _ptr$[esp-4], 13
	mov	eax, DWORD PTR _ptr$[esp-4]
	shr	eax, 15					; 0000000fH
	xor	eax, ecx
; Line 358
	ret	0
_gcDefaultHashFN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapDrop
_TEXT	SEGMENT
_temp$1$ = -8						; size = 4
_n_len$1$ = -4						; size = 4
_idx$1$ = -4						; size = 4
_i$1$ = 8						; size = 4
_k_hash$1$ = 8						; size = 4
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_flags$ = 16						; size = 2
_gcMapDrop PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 206
	sub	esp, 8
	push	ebx
; Line 213
	mov	ebx, DWORD PTR _gc$[esp+8]
	push	ebp
	push	esi
	push	edi
	push	DWORD PTR _ptr$[esp+20]
	mov	eax, DWORD PTR [ebx+4]
	xor	ebp, ebp
	call	eax
; Line 214
	xor	edx, edx
	mov	DWORD PTR _k_hash$1$[esp+24], eax
	div	DWORD PTR [ebx+12]
; Line 216
	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	mov	ecx, edx
	mov	DWORD PTR _idx$1$[esp+24], ecx
	mov	esi, DWORD PTR [eax+ecx*4]
; Line 217
	test	esi, esi
	je	SHORT $LN3@gcMapDrop
	mov	edi, DWORD PTR _flags$[esp+20]
	and	edi, 1
$LL2@gcMapDrop:
; Line 219
	mov	eax, DWORD PTR [esi]
	push	eax
	test	di, di
	je	SHORT $LN15@gcMapDrop
	mov	eax, DWORD PTR [ebx+4]
	call	eax
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, DWORD PTR _k_hash$1$[esp+20]
	sete	cl
	jmp	SHORT $LN16@gcMapDrop
$LN15@gcMapDrop:
	push	DWORD PTR _ptr$[esp+24]
	mov	eax, DWORD PTR [ebx+8]
	call	eax
	add	esp, 8
	movzx	ecx, al
$LN16@gcMapDrop:
	test	ecx, ecx
	jne	SHORT $LN20@gcMapDrop
; Line 279
	mov	ebp, esi
; Line 280
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL2@gcMapDrop
$LN3@gcMapDrop:
	pop	edi
; Line 284
	pop	esi
	pop	ebp
	mov	eax, 2
	pop	ebx
	add	esp, 8
	ret	0
$LN20@gcMapDrop:
; Line 222
	mov	eax, DWORD PTR [esi+8]
	test	ebp, ebp
	je	SHORT $LN10@gcMapDrop
; Line 223
	mov	DWORD PTR [ebp+8], eax
	jmp	SHORT $LN11@gcMapDrop
$LN10@gcMapDrop:
; Line 225
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _idx$1$[esp+24]
	mov	DWORD PTR [ecx+edx*4], eax
$LN11@gcMapDrop:
; Line 229
	push	esi
	call	_free
; Line 232
	mov	esi, DWORD PTR [ebx+12]
	add	esp, 4
	cmp	esi, 10					; 0000000aH
	jbe	$LN12@gcMapDrop
	mov	eax, DWORD PTR [ebx+20]
	lea	ecx, DWORD PTR [esi+esi]
	dec	eax
	xor	edx, edx
	mov	DWORD PTR [ebx+20], eax
	div	ecx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm1, xmm0
	movss	xmm0, DWORD PTR [ebx+16]
	comiss	xmm0, xmm1
	jbe	$LN12@gcMapDrop
; Line 236
	shr	esi, 1
; Line 237
	push	4
	push	esi
	mov	DWORD PTR _n_len$1$[esp+32], esi
	call	_calloc
	mov	esi, eax
	add	esp, 8
	mov	DWORD PTR _temp$1$[esp+24], esi
; Line 238
	test	esi, esi
	jne	SHORT $LN13@gcMapDrop
; Line 240
	dec	DWORD PTR [ebx+20]
; Line 241
	lea	eax, DWORD PTR [esi+1]
	pop	edi
; Line 284
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
$LN13@gcMapDrop:
; Line 245
	xor	ebp, ebp
	mov	DWORD PTR _i$1$[esp+20], ebp
	cmp	DWORD PTR [ebx+12], ebp
	jbe	SHORT $LN5@gcMapDrop
	npad	2
$LL40@gcMapDrop:
; Line 252
	mov	eax, DWORD PTR [ebx]
	mov	edi, DWORD PTR [eax+ebp*4]
; Line 253
	test	edi, edi
	je	SHORT $LN4@gcMapDrop
	mov	ebp, DWORD PTR _temp$1$[esp+24]
	npad	3
$LL7@gcMapDrop:
; Line 261
	push	DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [edi+8]
	call	eax
	xor	edx, edx
	add	esp, 4
	div	DWORD PTR _n_len$1$[esp+24]
; Line 262
	mov	eax, DWORD PTR [ebp+edx*4]
	mov	DWORD PTR [edi+8], eax
; Line 263
	mov	DWORD PTR [ebp+edx*4], edi
; Line 266
	mov	edi, esi
	test	esi, esi
	jne	SHORT $LL7@gcMapDrop
	mov	ebp, DWORD PTR _i$1$[esp+20]
$LN4@gcMapDrop:
; Line 245
	inc	ebp
	mov	DWORD PTR _i$1$[esp+20], ebp
	cmp	ebp, DWORD PTR [ebx+12]
	jb	SHORT $LL40@gcMapDrop
	mov	esi, DWORD PTR _temp$1$[esp+24]
$LN5@gcMapDrop:
; Line 270
	push	DWORD PTR [ebx]
	call	_free
; Line 272
	mov	eax, DWORD PTR _n_len$1$[esp+28]
	add	esp, 4
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+12], eax
$LN12@gcMapDrop:
; Line 284
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 8
	ret	0
_gcMapDrop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapGet
_TEXT	SEGMENT
_k_hash$1$ = 8						; size = 4
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_flags$ = 16						; size = 2
_gcMapGet PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 163
	push	ebx
; Line 167
	mov	ebx, DWORD PTR _gc$[esp]
	push	ebp
	mov	ebp, DWORD PTR _ptr$[esp+4]
	push	esi
	mov	eax, DWORD PTR [ebx+4]
	push	edi
	push	ebp
	call	eax
; Line 168
	xor	edx, edx
	mov	DWORD PTR _k_hash$1$[esp+16], eax
	div	DWORD PTR [ebx+12]
	mov	esi, DWORD PTR [ebx]
	add	esp, 4
	mov	esi, DWORD PTR [esi+edx*4]
; Line 169
	test	esi, esi
	je	SHORT $LN3@gcMapGet
	mov	edi, DWORD PTR _flags$[esp+12]
	and	edi, 1
	npad	2
$LL2@gcMapGet:
; Line 171
	mov	eax, DWORD PTR [esi]
	push	eax
	test	di, di
	je	SHORT $LN6@gcMapGet
	mov	eax, DWORD PTR [ebx+4]
	call	eax
	xor	ecx, ecx
	add	esp, 4
	cmp	DWORD PTR _k_hash$1$[esp+12], eax
	sete	cl
	jmp	SHORT $LN7@gcMapGet
$LN6@gcMapGet:
	mov	eax, DWORD PTR [ebx+8]
	push	ebp
	call	eax
	add	esp, 8
	movzx	ecx, al
$LN7@gcMapGet:
	test	ecx, ecx
	jne	SHORT $LN9@gcMapGet
; Line 176
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL2@gcMapGet
$LN3@gcMapGet:
	pop	edi
; Line 180
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	ret	0
$LN9@gcMapGet:
	pop	edi
; Line 173
	lea	eax, DWORD PTR [esi+4]
; Line 180
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_gcMapGet ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapPut
_TEXT	SEGMENT
_i$1$ = -12						; size = 4
_temp$1$ = -8						; size = 4
tv367 = -4						; size = 4
_node_idx$1$ = -4					; size = 4
_node_hash$1$ = 8					; size = 4
_gc$ = 8						; size = 4
_ptr$ = 12						; size = 4
_dtor$ = 16						; size = 4
_flags$ = 20						; size = 2
_gcMapPut PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 69
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 75
	mov	ebx, DWORD PTR _gc$[esp+12]
	push	ebp
	push	esi
	push	edi
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [ebx+12]
	inc	eax
	mov	DWORD PTR [ebx+20], eax
	mov	DWORD PTR tv367[esp+28], ecx
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mov	eax, ecx
	shr	eax, 31					; 0000001fH
	cvtpd2ps xmm1, xmm0
	movd	xmm0, ecx
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm0, xmm0
	divss	xmm1, xmm0
	comiss	xmm1, DWORD PTR [ebx+16]
	jbe	$LN32@gcMapPut
; Line 79
	lea	eax, DWORD PTR [ecx+ecx]
; Line 80
	push	4
	push	eax
	call	_calloc
	mov	esi, eax
	add	esp, 8
	mov	DWORD PTR _temp$1$[esp+28], esi
; Line 81
	test	esi, esi
	jne	SHORT $LN10@gcMapPut
$LN47@gcMapPut:
; Line 158
	dec	DWORD PTR [ebx+20]
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
$LN10@gcMapPut:
; Line 88
	xor	ebp, ebp
	mov	DWORD PTR _i$1$[esp+28], ebp
	cmp	DWORD PTR [ebx+12], ebp
	jbe	SHORT $LN31@gcMapPut
	npad	4
$LL43@gcMapPut:
; Line 95
	mov	eax, DWORD PTR [ebx]
	mov	edi, DWORD PTR [eax+ebp*4]
; Line 96
	test	edi, edi
	je	SHORT $LN2@gcMapPut
	mov	ebp, DWORD PTR _temp$1$[esp+28]
	npad	3
$LL5@gcMapPut:
; Line 107
	push	DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [edi+8]
	call	eax
	mov	ebx, DWORD PTR tv367[esp+32]
	xor	edx, edx
	add	esp, 4
	lea	ecx, DWORD PTR [ebx+ebx]
	mov	ebx, DWORD PTR _gc$[esp+24]
	div	ecx
; Line 109
	mov	eax, DWORD PTR [ebp+edx*4]
	mov	DWORD PTR [edi+8], eax
; Line 111
	mov	DWORD PTR [ebp+edx*4], edi
; Line 114
	mov	edi, esi
	test	esi, esi
	jne	SHORT $LL5@gcMapPut
	mov	ebp, DWORD PTR _i$1$[esp+28]
$LN2@gcMapPut:
; Line 88
	inc	ebp
	mov	DWORD PTR _i$1$[esp+28], ebp
	cmp	ebp, DWORD PTR [ebx+12]
	jb	SHORT $LL43@gcMapPut
	mov	esi, DWORD PTR _temp$1$[esp+28]
$LN31@gcMapPut:
; Line 118
	push	DWORD PTR [ebx]
	call	_free
; Line 120
	mov	ecx, DWORD PTR tv367[esp+32]
	add	esp, 4
	mov	DWORD PTR [ebx], esi
	lea	eax, DWORD PTR [ecx+ecx]
	mov	DWORD PTR [ebx+12], eax
$LN32@gcMapPut:
; Line 124
	mov	ebp, DWORD PTR _ptr$[esp+24]
	mov	eax, DWORD PTR [ebx+4]
	push	ebp
	call	eax
; Line 125
	xor	edx, edx
	mov	DWORD PTR _node_hash$1$[esp+28], eax
	div	DWORD PTR [ebx+12]
; Line 126
	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	edi, edx
	mov	DWORD PTR _node_idx$1$[esp+28], edi
	mov	esi, DWORD PTR [ecx+edi*4]
; Line 127
	test	esi, esi
	je	SHORT $LN8@gcMapPut
	mov	edi, DWORD PTR _flags$[esp+24]
	and	edi, 1
$LL7@gcMapPut:
; Line 129
	mov	eax, DWORD PTR [esi]
	test	di, di
	je	SHORT $LN14@gcMapPut
	push	eax
	mov	eax, DWORD PTR [ebx+4]
	call	eax
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, DWORD PTR _node_hash$1$[esp+24]
	sete	cl
	jmp	SHORT $LN15@gcMapPut
$LN14@gcMapPut:
	push	ebp
	push	eax
	mov	eax, DWORD PTR [ebx+8]
	call	eax
	add	esp, 8
	movzx	ecx, al
$LN15@gcMapPut:
	test	ecx, ecx
	jne	SHORT $LN19@gcMapPut
; Line 140
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL7@gcMapPut
; Line 129
	mov	edi, DWORD PTR _node_idx$1$[esp+28]
$LN8@gcMapPut:
; Line 144
	push	12					; 0000000cH
	call	_malloc
	mov	ecx, eax
	add	esp, 4
; Line 145
	test	ecx, ecx
	je	$LN47@gcMapPut
; Line 151
	mov	eax, DWORD PTR _dtor$[esp+24]
	mov	DWORD PTR [ecx], ebp
	mov	DWORD PTR [ecx+4], eax
; Line 152
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [ecx+8], eax
; Line 155
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [eax+edi*4], ecx
; Line 158
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
$LN19@gcMapPut:
; Line 131
	dec	DWORD PTR [ebx+20]
; Line 136
	mov	eax, DWORD PTR _dtor$[esp+24]
	pop	edi
	mov	DWORD PTR [esi+4], eax
; Line 158
	xor	eax, eax
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
_gcMapPut ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapDestroy
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_flags1$ = 12						; size = 2
_flags2$ = 16						; size = 2
_gcMapDestroy PROC					; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 289
	push	ebx
; Line 297
	mov	ebx, DWORD PTR _gc$[esp]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [ebx+12], edi
	jbe	SHORT $LN3@gcMapDestr
	push	esi
	npad	2
$LL4@gcMapDestr:
; Line 299
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+edi*4]
; Line 300
	test	eax, eax
	je	SHORT $LN2@gcMapDestr
	npad	7
$LL5@gcMapDestr:
; Line 302
	mov	esi, DWORD PTR [eax+8]
; Line 307
	push	eax
	call	_free
	add	esp, 4
; Line 309
	mov	eax, esi
	test	esi, esi
	jne	SHORT $LL5@gcMapDestr
$LN2@gcMapDestr:
; Line 297
	inc	edi
	cmp	edi, DWORD PTR [ebx+12]
	jb	SHORT $LL4@gcMapDestr
	pop	esi
$LN3@gcMapDestr:
; Line 314
	push	DWORD PTR [ebx]
	call	_free
	add	esp, 4
	pop	edi
	pop	ebx
; Line 315
	ret	0
_gcMapDestroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _gcMapInit
_TEXT	SEGMENT
_gc$ = 8						; size = 4
_gcHashFN$ = 12						; size = 4
_gcPtrCMP$ = 16						; size = 4
_start_len$ = 20					; size = 4
_load_factor$ = 24					; size = 4
_gcMapInit PROC						; COMDAT
; File C:\tmp\cxx\src\gc.c
; Line 52
	push	esi
; Line 53
	mov	esi, DWORD PTR _start_len$[esp]
	push	4
	push	esi
	call	_calloc
	mov	ecx, DWORD PTR _gc$[esp+8]
	add	esp, 8
	mov	DWORD PTR [ecx], eax
; Line 55
	test	eax, eax
	jne	SHORT $LN2@gcMapInit
	mov	eax, 1
	pop	esi
; Line 64
	ret	0
$LN2@gcMapInit:
; Line 57
	mov	eax, DWORD PTR _gcHashFN$[esp]
; Line 60
	movss	xmm0, DWORD PTR _load_factor$[esp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _gcPtrCMP$[esp]
	mov	DWORD PTR [ecx+8], eax
; Line 63
	xor	eax, eax
	mov	DWORD PTR [ecx+12], esi
	movss	DWORD PTR [ecx+16], xmm0
	mov	DWORD PTR [ecx+20], 0
	pop	esi
; Line 64
	ret	0
_gcMapInit ENDP
_TEXT	ENDS
END
